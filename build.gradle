buildscript {
    ext {
        springBootVersion = '1.5.4.RELEASE'
        assertjVersion = '3.8.0'
        catchexceptionVersion = '1.4.4'
    }
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath("org.springframework.boot:spring-boot-gradle-plugin:$springBootVersion")
    }
}

subprojects {
	
	apply plugin: 'java'
	apply plugin: 'eclipse'
	apply plugin: 'org.springframework.boot'
	apply plugin: "jacoco" 
	apply plugin: 'maven-publish'

	sourceCompatibility = 1.8
	targetCompatibility = 1.8
	
	repositories {
	    mavenCentral()
	}
	
	configurations {
	    providedRuntuildime
	}
	
	// Integracion test
	
	sourceSets {
	    integrationTest {
	        java.srcDir file('src/integrationtest/java')
	        resources.srcDir file('src/integrationtest/resources')
	        compileClasspath += sourceSets.main.output + configurations.testRuntime
	        runtimeClasspath += output + compileClasspath
	    }
	}

	task integrationTest(type: Test) {
  		description = 'Runs the integration tests.'
    	group = 'verification'
    	testClassesDirs = sourceSets.integrationTest.output.classesDirs
    	classpath = sourceSets.integrationTest.runtimeClasspath
    }
	
	check.dependsOn integrationTest
	
	// FIN Integration test 
	
	// Publish maven local
	
	publishing {
	    publications {
	        mavenJava(MavenPublication) {
	        
	            artifactId jar.baseName
	            version jar.version
	            
	            from components.java
	            
		        pom.withXml { 
	                def parentNode = asNode().appendNode('parent') 
	                parentNode.appendNode('groupId','org.springframework.boot') 
	                parentNode.appendNode('artifactId','spring-boot-starter-parent') 
	                parentNode.appendNode('version',"$springBootVersion") 
	            } 
	        }
	    }
	}	
	
	// FIN Publish maven local

	task sourcesJar(type: Jar, dependsOn: classes) {
	    classifier = 'sources'
	    from sourceSets.main.allSource
	}
	
	task javadocJar(type: Jar, dependsOn: javadoc) {
	    classifier = 'javadoc'
	    from javadoc.destinationDir
	}
	
	artifacts {
	    archives sourcesJar
	    archives javadocJar
	}	
	
	dependencies {
	    compileOnly('org.projectlombok:lombok')
	    
	    testCompile('org.projectlombok:lombok')
	    testCompile("org.springframework.boot:spring-boot-starter-test")
	    testCompile("org.assertj:assertj-core:${assertjVersion}")
	    testCompile("eu.codearte.catch-exception:catch-exception:${catchexceptionVersion}")
	}
}